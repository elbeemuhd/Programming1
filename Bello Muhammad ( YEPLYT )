4. Exercise
Write function that translates a text to Pig Latin and back. English is
translated to Pig Latin by taking the first letter of every word, moving it to
the end of the word and adding ‘ay’. “The quick brown fox” becomes “Hetay
uickqay rownbay oxfay”.


def pigify(text):
    def pigify_word(word):
        end = len(word)
        word = word[1:end] + word[0] + "ay"
        return word

    return " ".join([pigify_word(word) for word in text.split(" ")])


def englify(text):
    def englify_word(word):
        end = len(word)
        word = word[end - 3] + word[0:end - 3]
        return word

    return " ".join([englify_word(word) for word in text.split(" ")])


def main():
    while (True):
        choose = input("Choose or press Enter to exit: \n 1. English -> Pig Latin \n 2. Pig Latin -> Enlish \n")

        if (len(choose) == 0):
            print("Exit")
            break
        else:
            try:
                choose = int(choose)
                if (choose == 1):
                    text = input("Enter text: \n")
                    print(pigify(text))
                    break
                elif (choose == 2):
                    text = input("Enter text: \n")
                    print(englify(text))
                    break
                else:
                    print("Choose from available")
            except ValueError:
                print("Write a number")


main()



7. Exercise
Write a program that finds the longest palindromic substring of a given
string. Try to be as efficient as possible!



import sys


# A utility function to print a
# substring str[low..high]
def printSubStr(st, low, high):
    sys.stdout.write(st[low: high + 1])
    sys.stdout.flush()
    return ''


# This function prints the longest palindrome
# substring of st[]. It also returns the length
# of the longest palindrome
def longestPalSubstr(st):
    n = len(st)  # get length of input string

    # table[i][j] will be false if substring
    # str[i..j] is not palindrome. Else
    # table[i][j] will be true
    table = [[0 for x in range(n)] for y
             in range(n)]

    # All substrings of length 1 are
    # palindromes
    maxLength = 1
    i = 0
    while (i < n):
        table[i][i] = True
        i = i + 1

    # check for sub-string of length 2.
    start = 0
    i = 0
    while i < n - 1:
        if (st[i] == st[i + 1]):
            table[i][i + 1] = True
            start = i
            maxLength = 2
        i = i + 1

    # Check for lengths greater than 2.
    # k is length of substring
    k = 3
    while k <= n:
        # Fix the starting index
        i = 0
        while i < (n - k + 1):

            # Get the ending index of
            # substring from starting
            # index i and length k
            j = i + k - 1

            # checking for sub-string from
            # ith index to jth index iff
            # st[i+1] to st[(j-1)] is a
            # palindrome
            if (table[i + 1][j - 1] and
                    st[i] == st[j]):
                table[i][j] = True

                if (k > maxLength):
                    start = i
                    maxLength = k
            i = i + 1
        k = k + 1
    print
    "Longest palindrome substring is: ", printSubStr(st, start,
                                                     start + maxLength - 1)

    return maxLength  # return length of LPS


# Driver program to test above functions
st = "forgeeksskeegfor"
l = longestPalSubstr(st)
print
"Length is:", l



12.Exercise
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see
that the 6th prime is 13.
What is the 10 001st prime number?


def isPrime(n)
    if n < 2; return "Neither prime, nor composite"
    for i in range(2 , int(n**0.5) + 1):
        if n % i == 0:
            return False
        return True

# returns the nth prime number
def nthPrime (n):
    numberOfPrime = 0
    prime = 1

    while numberOfPrime < n:
        Prime += 1
        if isPrime(prime):
            numberOfPrime +=1
    return prime

print(nthprime(10001))
